

                                                          MODULE-1

CREATE OR REPLACE PROCEDURE UPDATE_STUDENT(STUD_ID2 IN STUD_TBL.STUD_ID%TYPE,
     STUD_NAME2 IN STUD_TBL.STUD_NAME%TYPE,
     S_ADDRESS2 IN STUD_TBL.STUD_ADDRESS%TYPE,
     S_CONTACT2 IN STUD_TBL.STUD_CONTACT_NO%TYPE,
     S_STD2 IN STUD_TBL.STUD_STANDARD_ID%TYPE,
     S_DIV2 IN STUD_TBL.STUD_DIV%TYPE,
     P_NAME2 IN STUD_TBL.PARENT_NAME%TYPE,
     P_CONTACT2 IN STUD_TBL.P_CONTACT_NO%TYPE,
     P_ADDRESS2 IN STUD_TBL.P_OFFICE_ADD%TYPE,
     P_MOB2 IN STUD_TBL.P_MOBILE_NO%TYPE,
     P_EMAIL2 IN STUD_TBL.P_EMAIL_ID%TYPE)
     IS
     X NUMBER;
     BEGIN
     SELECT STUD_STANDARD_ID INTO X FROM STUD_TBL WHERE STUD_ID=STUD_ID2;
     IF S_STD2=X+1 THEN
     UPDATE STUD_TBL SET STUD_STANDARD_ID=S_STD2  WHERE STUD_ID=STUD_ID2;
     ELSE 
     DBMS_OUTPUT.PUT_LINE('PLEASE ENTER PROPER STANDARD ID');
     END IF;
     UPDATE STUDENT_TBL SET
     STUD_NAME=STUD_NAME2,
     STUD_ADDRESS=S_ADDRESS2,
     STUD_CONTACT_NO=S_CONTACT2,
     STUD_DIV=S_DIV2,
     PARENT_NAME=P_NAME2,
     P_CONTACT_NO=P_CONTACT2,
     P_OFFICE_ADD=P_ADDRESS2,
     P_MOBILE_NO=P_MOB2,
     P_EMAIL_ID=P_EMAIL2
     WHERE STUD_ID=STUD_ID2;
     EXCEPTION WHEN OTHERS THEN RECORD_ERROR();
     END;
/



CREATE SEQUENCE PEOPLE;


CREATE OR REPLACE PROCEDURE ADD_STUDENT
      (S_NAME IN STUD_TBL.STUD_NAME%TYPE,
      S_ADDRESS IN STUD_TBL.STUD_ADDRESS%TYPE,
      S_CONTACT IN STUD_TBL.STUD_CONTACT_NO%TYPE,
      S_STD IN STUD_TBL.STUD_STANDARD_ID%TYPE,
      S_DIV IN STUD_TBL.STUD_DIV%TYPE,
      P_NAME IN STUD_TBL.PARENT_NAME%TYPE,
      P_CONTACT IN STUD_TBL.P_CONTACT_NO%TYPE,
      P_ADDRESS IN STUD_TBL.P_OFFICE_ADD%TYPE,
      P_MOB IN STUD_TBL.P_MOBILE_NO%TYPE,
      P_EMAIL IN STUD_TBL.P_EMAIL_ID%TYPE)
      IS
      S_ID STUD_TBL.STUD_ID%TYPE;
      BEGIN
      SELECT CONCAT(SUBSTR(S_NAME,1,1),PEOPLE_SEQ.NEXTVAL) INTO S_ID FROM DUAL;
      INSERT INTO STUD_TBL VALUES(S_ID,S_NAME,S_ADDRESS,S_CONTACT,S_STD,S_DIV,P_NAME,P_CONTACT,P_ADDRESS,P_MOB,P_EMAIL);
      EXCEPTION WHEN OTHERS THEN RECORD_ERROR(); 
      FEES(S_ID);
      END;
       /
      CREATE OR REPLACE PROCEDURE FEES(S_ID STUD_TBL.STUD_ID%TYPE)
      IS
      FEES_PAYMENT STUD_FEES_DETAILS1.FEES_PAID%TYPE;
      BEGIN
      SELECT COURSE_ID INTO FEES_PAYMENT FROM COURSES_TBL WHERE COURSE_ID=(SELECT STUD_STANDARD_ID FROM STUD_TBL WHERE STUD_ID=S_ID);
      INSERT INTO STUD_FEES_DETAILS1(STUD_ID,FEES_PAID,FEES_BALANCE,TOTAL_FEES) VALUES (S_ID,0,FEES_PAYMENT,FEES_PAYMENT);
      EXCEPTION WHEN OTHERS THEN RECORD_ERROR();
       END;
        /



CREATE OR REPLACE PROCEDURE DELETE_STUDENT(STUD_ID3 IN STUD_TBL.STUD_ID%TYPE)
       IS
       WEEKEND EXCEPTION;
       X VARCHAR(100);
       BEGIN
       SELECT TO_CHAR(SYSDATE,'DAY') INTO X FROM DUAL;
       IF X='SUNDAY' OR X='SATURDAY' THEN
       RAISE WEEKEND;
      ELSE
      DELETE STUD_TBL WHERE STUD_ID=STUD_ID3;
      END IF;
      EXCEPTION WHEN WEEKEND THEN
      DBMS_OUTPUT.PUT_LINE('SORRY NO DELETION ON WEEKENDS HAPPY HOLIDAYS!!!!');
      WHEN OTHERS THEN
      RECORD_ERROR();
      END;
     /

                                                         MODULE-2

CREATE OR REPLACE PROCEDURE ADD_EXAM_DETAILS
      (S_ID IN STUD_EXAM_DETAILS.STUD_ID%TYPE,
      SUB_ID IN STUD_EXAM_DETAILS.STUD_SUB_ID%TYPE,
      SUB_MARKS IN STUD_EXAM_DETAILS.STUD_SUB_MARKS%TYPE,
      TOTAL_MARKS IN STUD_EXAM_DETAILS.SUB_TOTAL_MARKS%TYPE,
      E_ID IN STUD_EXAM_DETAILS.EXAM_ID%TYPE,
      E_YEAR IN STUD_EXAM_DETAILS.EXAM_YEAR%TYPE,
      E_DATE IN STUD_EXAM_DETAILS.EXAM_DATE%TYPE)
      IS
     STD_ID STUD_EXAM_DETAILS1234.STUD_COURSE_ID%TYPE;
     DIV STUD_EXAM_DETAILS1234.STUD_DIV%TYPE;
     BEGIN
     SELECT STUD_STANDARD_ID INTO STD_ID FROM STUD_TBL WHERE STUD_ID=S_ID;
     SELECT STUD_DIV INTO DIV FROM STUD_TBL WHERE STUD_ID=S_ID;
     INSERT INTO STUD_EXAM_DETAILS1234(STUD_ID,STUD_COURSE_ID,STUD_DIV,STUD_SUB_ID,STUD_SUB_MARKS,SUB_TOTAL_MARKS,EXAM_ID,EXAM_YEAR,EXAM_DATE) VALUES          (S_ID,STD_ID,DIV,SUB_ID,SUB_MARKS,TOTAL_MARKS,E_ID,E_YEAR,E_DATE);
     EXCEPTION WHEN OTHERS THEN RECORD_ERROR();
      END;
     /


CREATE OR REPLACE PROCEDURE UPDATE_EXAM_DETAILS
    (S_ID1 IN STUD_EXAM_DETAILS.STUD_ID%TYPE,
    S_COURSE_ID1 IN STUD_EXAM_DETAILS.STUD_COURSE_ID%TYPE,
    S_DIV1 IN STUD_EXAM_DETAILS.STUD_DIV%TYPE,
    S_SUB_ID1 IN STUD_EXAM_DETAILS.STUD_SUB_ID%TYPE,
    SUB_MARKS1 IN STUD_EXAM_DETAILS.STUD_SUB_MARKS%TYPE,
   TOTAL_MARKS1 IN STUD_EXAM_DETAILS.SUB_TOTAL_MARKS%TYPE,
   E_ID1 IN STUD_EXAM_DETAILS.EXAM_ID%TYPE,
   E_YEAR1 IN STUD_EXAM_DETAILS.EXAM_YEAR%TYPE,
   E_DATE1 IN STUD_EXAM_DETAILS.EXAM_DATE%TYPE)
   IS
   BEGIN
   UPDATE STUD_EXAM_DETAILS1234 SET
   STUD_COURSE_ID=S_COURSE_ID1,
   STUD_DIV=S_DIV1,
   STUD_SUB_ID=S_SUB_ID1,
   STUD_SUB_MARKS=SUB_MARKS1,
   SUB_TOTAL_MARKS=TOTAL_MARKS1,
   EXAM_ID=E_ID1,
   EXAM_YEAR=E_YEAR1,
   EXAM_DATE=E_DATE1
   WHERE STUD_ID=S_ID1;
   EXCEPTION WHEN OTHERS THEN RECORD_ERROR();
   END;
/



CREATE OR REPLACE PROCEDURE ADD_RANK
 ( S_ID1 IN RANK_STUD.STUD_ID%TYPE,
    SUB_ID1 IN RANK_STUD.SUBJECT_ID%TYPE,
    SUB_MARKS IN RANK_STUD.SUBJECT_MARKS%TYPE,
    TOTAL_MARKS IN RANK_STUD.TOTAL_MARKS%TYPE)
    IS
    NAME1 RANK_STUD.S_NAME%TYPE;
               
    STD_ID1 RANK_STUD.STD_ID%TYPE;
    DIV1 RANK_STUD.DIV%TYPE;
              
    PERCENT RANK_STUD.PERCENTAGE%TYPE;
    S_RANK RANK_STUD.STD_WISE_RANK%TYPE;
    D_RANK RANK_STUD.DIV_WISE_RANK%TYPE;
    SUB_RANK RANK_STUD.SUBJECT_WISE_RANK%TYPE;
    BEGIN
    SELECT STUD_NAME,STUD_STANDARD_ID,STUD_DIV INTO NAME1,STD_ID1,DIV1 FROM STUD_TBL WHERE STUD_ID=S_ID1;
    SELECT (SUB_MARKS/TOTAL_MARKS)*100 INTO PERCENT FROM DUAL;
    SELECT RANK(SUB_MARKS) WITHIN GROUP (ORDER BY STUD_SUB_MARKS DESC) INTO S_RANK FROM STUD_EXAM_DETAILS WHERE STUD_COURSE_ID=STD_ID1;
    SELECT RANK(SUB_MARKS)  WITHIN GROUP (ORDER BY STUD_SUB_MARKS DESC) INTO D_RANK FROM STUD_EXAM_DETAILS WHERE STUD_DIV=DIV1;
    SELECT RANK(SUB_MARKS)  WITHIN GROUP (ORDER BY STUD_SUB_MARKS DESC) INTO SUB_RANK FROM STUD_EXAM_DETAILS WHERE STUD_SUB_ID=SUB_ID1;
    INSERT INTO RANK_STUD1234(STUD_ID,S_NAME,SUBJECT_ID,STD_ID ,DIV ,SUBJECT_MARKS ,TOTAL_MARKS ,PERCENTAGE ,STD_WISE_RANK ,DIV_WISE_RANK ,             SUBJECT_WISE_RANK) VALUES(S_ID1,NAME1,SUB_ID1,STD_ID1,DIV1,SUB_MARKS,TOTAL_MARKS,CONCAT(PERCENT,'%'),S_RANK,D_RANK,SUB_RANK);
    EXCEPTION WHEN OTHERS THEN RECORD_ERROR();
    END;
   /


CREATE OR REPLACE PROCEDURE TOP31(DIV1 IN TOP_3.DIV%TYPE)
    IS
    BEGIN
    INSERT INTO TOP_3(STUD_ID,NAME,STD,DIV,PERCENTAGE,DIV_RANK) SELECT STUD_ID,S_NAME,STD_ID,DIV,PERCENTAGE,DIV_WISE_RANK FROM RANK_STUD
    WHERE DIV_WISE_RANK=1 OR DIV_WISE_RANK=2 OR DIV_WISE_RANK=3 AND DIV=DIV1;
    EXCEPTION WHEN OTHERS THEN RECORD_ERROR();
    END;
    /

CREATE OR REPLACE PROCEDURE TOP3(STD IN TOP_3.STD%TYPE)
    IS
    BEGIN
    INSERT INTO TOP_3(STUD_ID,NAME,STD,DIV,PERCENTAGE,STD_RANK) SELECT STUD_ID,S_NAME,STD_ID,DIV,PERCENTAGE,STD_WISE_RANK FROM RANK_STUD
    WHERE STD_WISE_RANK=1 OR STD_WISE_RANK=2 OR STD_WISE_RANK=3 AND STD_ID=STD;
    EXCEPTION WHEN OTHERS THEN RECORD_ERROR();
    END;
    /



CREATE OR REPLACE PROCEDURE RECORD_ERROR
IS
   PRAGMA AUTONOMOUS_TRANSACTION;
   DESCRIPTION  VARCHAR2(3000):=SQLERRM;
   CODE  NUMBER:=SQLCODE; 
   BEGIN
   INSERT INTO ERROR_LOG (ERROR_CODE,ERROR_DESCRIPTION,TRACE,CALLSTACK,OCCURED_ON,PRODUCER)
   VALUES (CODE,DESCRIPTION ,SYS.DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,SYS.DBMS_UTILITY.FORMAT_CALL_STACK,SYSDATE,USER);
END;